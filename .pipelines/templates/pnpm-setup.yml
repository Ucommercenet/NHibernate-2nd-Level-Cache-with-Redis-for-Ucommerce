##
# Common Steps used to set up for running Nuke targets
# Usage example:
# 
# steps:
#   - template: templates/pnpm-setup.yml
#
# Example using package json engines:
#
# steps:
#   - template: templates/pnpm-setup.yml
#     usePackageJson: 'true'
#     packageJsonPath: src/package.json
# 
# If you use package.json it must have an engine version set
# for both node and pnpm
##

parameters:
  - name: cachePackages
    type: boolean
    default: true
  - name: usePackageJson
    type: boolean
    default: false
  - name: packageJsonPath
    type: string
    default: package.json
  - name: nodeVersion
    type: string
    default: 14.16.0
  - name: pnpmVersion
    type: string
    default: 6.32.2
  - name: pnpmLockFilePath
    type: string
    default: pnpm-lock.yaml

steps:
  - ${{ if eq(parameters.usePackageJson, false) }}:
    - bash: echo "##vso[task.setvariable variable=nodeVersion]${{ parameters.nodeVersion }}"
      displayName: Set node version to ${{ parameters.nodeVersion }} from parameters
      
    - bash: echo "##vso[task.setvariable variable=pnpmVersion]${{ parameters.pnpmVersion }}"
      displayName: Set pnpm version to ${{ parameters.pnpmVersion }} from parameters
      
  - ${{ if eq(parameters.usePackageJson, true) }}:
    - bash: echo "##vso[task.setvariable variable=nodeVersion]$(jq -r '.engines.node' '${{parameters.packageJsonPath}}')"
      displayName: Get node version from ${{ parameters.packageJsonPath }}
      
    - bash: echo "##vso[task.setvariable variable=pnpmVersion]$(jq -r '.engines.pnpm' '${{parameters.packageJsonPath}}')"
      displayName: Get pnpm version from ${{ parameters.packageJsonPath }}

  - task: NodeTool@0
    displayName: Use Node
    inputs:
      versionSpec: $(nodeVersion)

  - script: npm install -g pnpm@$(pnpmVersion)
    displayName: Install pnpm

  - script: 'pnpm config set store-dir $(pnpmStore)'
    displayName: Set store dir

  - ${{ if eq(parameters.cachePackages, true) }}:
      - task: Cache@2
        displayName: Cache pnpm Packages
        inputs:
          key: 'pnpm | "$(Agent.OS)" | ${{ parameters.pnpmLockFilePath }}'
          restoreKeys: |
            pnpm | "$(Agent.OS)"
            pnpm
          path: $(pnpmStore)